// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserWalletAddressesStatuses string

const (
	UserWalletAddressesStatusesActive    UserWalletAddressesStatuses = "active"
	UserWalletAddressesStatusesInactive  UserWalletAddressesStatuses = "inactive"
	UserWalletAddressesStatusesSuspended UserWalletAddressesStatuses = "suspended"
	UserWalletAddressesStatusesDeleted   UserWalletAddressesStatuses = "deleted"
)

func (e *UserWalletAddressesStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserWalletAddressesStatuses(s)
	case string:
		*e = UserWalletAddressesStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for UserWalletAddressesStatuses: %T", src)
	}
	return nil
}

type NullUserWalletAddressesStatuses struct {
	UserWalletAddressesStatuses UserWalletAddressesStatuses `json:"user_wallet_addresses_statuses"`
	Valid                       bool                        `json:"valid"` // Valid is true if UserWalletAddressesStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserWalletAddressesStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.UserWalletAddressesStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserWalletAddressesStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserWalletAddressesStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserWalletAddressesStatuses), nil
}

type Campaigns struct {
	ID           int64  `json:"id"`
	Image        string `json:"image"`
	CampaignName string `json:"campaign_name"`
}

type Donations struct {
	ID           int64     `json:"id"`
	Owner        string    `json:"owner"`
	Title        string    `json:"title"`
	CampaignType string    `json:"campaign_type"`
	Description  string    `json:"description"`
	Goal         int64     `json:"goal"`
	Deadline     time.Time `json:"deadline"`
	Image        string    `json:"image"`
	CreatedAt    time.Time `json:"created_at"`
}

type UserSession struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type UserWalletAddresses struct {
	ID            int64                       `json:"id"`
	UserID        string                      `json:"user_id"`
	WalletAddress string                      `json:"wallet_address"`
	Chain         string                      `json:"chain"`
	Status        UserWalletAddressesStatuses `json:"status"`
	CreatedAt     time.Time                   `json:"created_at"`
	UpdatedAt     time.Time                   `json:"updated_at"`
	DeletedAt     sql.NullTime                `json:"deleted_at"`
}

type Users struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	Avatar            string    `json:"avatar"`
	Email             string    `json:"email"`
	IsEmailVerified   bool      `json:"is_email_verified"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	Balance           string    `json:"balance"`
	Biometrics        bool      `json:"biometrics"`
	Address           string    `json:"address"`
	FilePath          string    `json:"file_path"`
	SecretCode        string    `json:"secret_code"`
	IsUsed            bool      `json:"is_used"`
	IsFirstTime       bool      `json:"is_first_time"`
	CreatedAt         time.Time `json:"created_at"`
	ExpiredAt         time.Time `json:"expired_at"`
}
