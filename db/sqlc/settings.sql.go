// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: settings.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCompanyFeatureFlag = `-- name: CreateCompanyFeatureFlag :one
INSERT INTO company_feature_flags (
  id,
  company_id,
  flag_key,
  is_enabled,
  created_at,
  updated_at
) VALUES (
  COALESCE($1, uuid_generate_v4()),
  $2,
  $3,
  $4,
  COALESCE($5, NOW()),
  COALESCE($6, NOW())
) RETURNING id, company_id, flag_key, is_enabled, created_at, updated_at
`

type CreateCompanyFeatureFlagParams struct {
	ID        interface{} `json:"id"`
	CompanyID uuid.UUID   `json:"company_id"`
	FlagKey   string      `json:"flag_key"`
	IsEnabled bool        `json:"is_enabled"`
	CreatedAt interface{} `json:"created_at"`
	UpdatedAt interface{} `json:"updated_at"`
}

func (q *Queries) CreateCompanyFeatureFlag(ctx context.Context, arg CreateCompanyFeatureFlagParams) (CompanyFeatureFlags, error) {
	row := q.db.QueryRow(ctx, createCompanyFeatureFlag,
		arg.ID,
		arg.CompanyID,
		arg.FlagKey,
		arg.IsEnabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CompanyFeatureFlags
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FlagKey,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCompanySetting = `-- name: CreateCompanySetting :one
INSERT INTO company_settings (
  id,
  company_id,
  setting_key,
  setting_value,
  data_type,
  description,
  created_at,
  updated_at
) VALUES (
  COALESCE($1, uuid_generate_v4()),
  $2,
  $3,
  $4,
  COALESCE($5, 'string'),
  $6,
  COALESCE($7, NOW()),
  COALESCE($8, NOW())
) RETURNING id, company_id, setting_key, setting_value, data_type, description, created_at, updated_at
`

type CreateCompanySettingParams struct {
	ID           interface{} `json:"id"`
	CompanyID    uuid.UUID   `json:"company_id"`
	SettingKey   string      `json:"setting_key"`
	SettingValue pgtype.Text `json:"setting_value"`
	DataType     interface{} `json:"data_type"`
	Description  pgtype.Text `json:"description"`
	CreatedAt    interface{} `json:"created_at"`
	UpdatedAt    interface{} `json:"updated_at"`
}

func (q *Queries) CreateCompanySetting(ctx context.Context, arg CreateCompanySettingParams) (CompanySettings, error) {
	row := q.db.QueryRow(ctx, createCompanySetting,
		arg.ID,
		arg.CompanyID,
		arg.SettingKey,
		arg.SettingValue,
		arg.DataType,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CompanySettings
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFeatureFlag = `-- name: CreateFeatureFlag :one
INSERT INTO feature_flags (
  id,
  flag_key,
  description,
  is_enabled,
  rollout_percentage,
  conditions,
  created_at,
  updated_at
) VALUES (
  COALESCE($1, uuid_generate_v4()),
  $2,
  $3,
  COALESCE($4, FALSE),
  COALESCE($5, 0),
  $6,
  COALESCE($7, NOW()),
  COALESCE($8, NOW())
) RETURNING id, flag_key, description, is_enabled, rollout_percentage, conditions, created_at, updated_at
`

type CreateFeatureFlagParams struct {
	ID                interface{} `json:"id"`
	FlagKey           string      `json:"flag_key"`
	Description       pgtype.Text `json:"description"`
	IsEnabled         interface{} `json:"is_enabled"`
	RolloutPercentage interface{} `json:"rollout_percentage"`
	Conditions        []byte      `json:"conditions"`
	CreatedAt         interface{} `json:"created_at"`
	UpdatedAt         interface{} `json:"updated_at"`
}

func (q *Queries) CreateFeatureFlag(ctx context.Context, arg CreateFeatureFlagParams) (FeatureFlags, error) {
	row := q.db.QueryRow(ctx, createFeatureFlag,
		arg.ID,
		arg.FlagKey,
		arg.Description,
		arg.IsEnabled,
		arg.RolloutPercentage,
		arg.Conditions,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FeatureFlags
	err := row.Scan(
		&i.ID,
		&i.FlagKey,
		&i.Description,
		&i.IsEnabled,
		&i.RolloutPercentage,
		&i.Conditions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSystemSetting = `-- name: CreateSystemSetting :one
INSERT INTO system_settings (
  id,
  setting_key,
  setting_value,
  data_type,
  description,
  is_sensitive,
  created_at,
  updated_at
) VALUES (
  COALESCE($1, uuid_generate_v4()),
  $2,
  $3,
  COALESCE($4, 'string'),
  $5,
  COALESCE($6, FALSE),
  COALESCE($7, NOW()),
  COALESCE($8, NOW())
) RETURNING id, setting_key, setting_value, data_type, description, is_sensitive, created_at, updated_at
`

type CreateSystemSettingParams struct {
	ID           interface{} `json:"id"`
	SettingKey   string      `json:"setting_key"`
	SettingValue pgtype.Text `json:"setting_value"`
	DataType     interface{} `json:"data_type"`
	Description  pgtype.Text `json:"description"`
	IsSensitive  interface{} `json:"is_sensitive"`
	CreatedAt    interface{} `json:"created_at"`
	UpdatedAt    interface{} `json:"updated_at"`
}

func (q *Queries) CreateSystemSetting(ctx context.Context, arg CreateSystemSettingParams) (SystemSettings, error) {
	row := q.db.QueryRow(ctx, createSystemSetting,
		arg.ID,
		arg.SettingKey,
		arg.SettingValue,
		arg.DataType,
		arg.Description,
		arg.IsSensitive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SystemSettings
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.Description,
		&i.IsSensitive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserFeatureFlag = `-- name: CreateUserFeatureFlag :one
INSERT INTO user_feature_flags (
  id,
  user_id,
  flag_key,
  is_enabled,
  created_at,
  updated_at
) VALUES (
  COALESCE($1, uuid_generate_v4()),
  $2,
  $3,
  $4,
  COALESCE($5, NOW()),
  COALESCE($6, NOW())
) RETURNING id, user_id, flag_key, is_enabled, created_at, updated_at
`

type CreateUserFeatureFlagParams struct {
	ID        interface{} `json:"id"`
	UserID    uuid.UUID   `json:"user_id"`
	FlagKey   string      `json:"flag_key"`
	IsEnabled bool        `json:"is_enabled"`
	CreatedAt interface{} `json:"created_at"`
	UpdatedAt interface{} `json:"updated_at"`
}

func (q *Queries) CreateUserFeatureFlag(ctx context.Context, arg CreateUserFeatureFlagParams) (UserFeatureFlags, error) {
	row := q.db.QueryRow(ctx, createUserFeatureFlag,
		arg.ID,
		arg.UserID,
		arg.FlagKey,
		arg.IsEnabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserFeatureFlags
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FlagKey,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSetting = `-- name: CreateUserSetting :one
INSERT INTO user_settings (
  id,
  user_id,
  setting_key,
  setting_value,
  data_type,
  created_at,
  updated_at
) VALUES (
  COALESCE($1, uuid_generate_v4()),
  $2,
  $3,
  $4,
  COALESCE($5, 'string'),
  COALESCE($6, NOW()),
  COALESCE($7, NOW())
) RETURNING id, user_id, setting_key, setting_value, data_type, created_at, updated_at
`

type CreateUserSettingParams struct {
	ID           interface{} `json:"id"`
	UserID       uuid.UUID   `json:"user_id"`
	SettingKey   string      `json:"setting_key"`
	SettingValue pgtype.Text `json:"setting_value"`
	DataType     interface{} `json:"data_type"`
	CreatedAt    interface{} `json:"created_at"`
	UpdatedAt    interface{} `json:"updated_at"`
}

func (q *Queries) CreateUserSetting(ctx context.Context, arg CreateUserSettingParams) (UserSettings, error) {
	row := q.db.QueryRow(ctx, createUserSetting,
		arg.ID,
		arg.UserID,
		arg.SettingKey,
		arg.SettingValue,
		arg.DataType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserSettings
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompanySetting = `-- name: DeleteCompanySetting :exec
DELETE FROM company_settings 
WHERE company_id = $1 AND setting_key = $2
`

type DeleteCompanySettingParams struct {
	CompanyID  uuid.UUID `json:"company_id"`
	SettingKey string    `json:"setting_key"`
}

func (q *Queries) DeleteCompanySetting(ctx context.Context, arg DeleteCompanySettingParams) error {
	_, err := q.db.Exec(ctx, deleteCompanySetting, arg.CompanyID, arg.SettingKey)
	return err
}

const deleteSystemSetting = `-- name: DeleteSystemSetting :exec
DELETE FROM system_settings WHERE setting_key = $1
`

func (q *Queries) DeleteSystemSetting(ctx context.Context, settingKey string) error {
	_, err := q.db.Exec(ctx, deleteSystemSetting, settingKey)
	return err
}

const deleteUserSetting = `-- name: DeleteUserSetting :exec
DELETE FROM user_settings 
WHERE user_id = $1 AND setting_key = $2
`

type DeleteUserSettingParams struct {
	UserID     uuid.UUID `json:"user_id"`
	SettingKey string    `json:"setting_key"`
}

func (q *Queries) DeleteUserSetting(ctx context.Context, arg DeleteUserSettingParams) error {
	_, err := q.db.Exec(ctx, deleteUserSetting, arg.UserID, arg.SettingKey)
	return err
}

const getAllFeatureFlags = `-- name: GetAllFeatureFlags :many
SELECT id, flag_key, description, is_enabled, rollout_percentage, conditions, created_at, updated_at FROM feature_flags ORDER BY flag_key
`

func (q *Queries) GetAllFeatureFlags(ctx context.Context) ([]FeatureFlags, error) {
	rows, err := q.db.Query(ctx, getAllFeatureFlags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FeatureFlags{}
	for rows.Next() {
		var i FeatureFlags
		if err := rows.Scan(
			&i.ID,
			&i.FlagKey,
			&i.Description,
			&i.IsEnabled,
			&i.RolloutPercentage,
			&i.Conditions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSystemSettings = `-- name: GetAllSystemSettings :many
SELECT id, setting_key, setting_value, data_type, description, is_sensitive, created_at, updated_at FROM system_settings 
ORDER BY setting_key
`

func (q *Queries) GetAllSystemSettings(ctx context.Context) ([]SystemSettings, error) {
	rows, err := q.db.Query(ctx, getAllSystemSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemSettings{}
	for rows.Next() {
		var i SystemSettings
		if err := rows.Scan(
			&i.ID,
			&i.SettingKey,
			&i.SettingValue,
			&i.DataType,
			&i.Description,
			&i.IsSensitive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyFeatureFlag = `-- name: GetCompanyFeatureFlag :one
SELECT id, company_id, flag_key, is_enabled, created_at, updated_at FROM company_feature_flags 
WHERE company_id = $1 AND flag_key = $2
`

type GetCompanyFeatureFlagParams struct {
	CompanyID uuid.UUID `json:"company_id"`
	FlagKey   string    `json:"flag_key"`
}

func (q *Queries) GetCompanyFeatureFlag(ctx context.Context, arg GetCompanyFeatureFlagParams) (CompanyFeatureFlags, error) {
	row := q.db.QueryRow(ctx, getCompanyFeatureFlag, arg.CompanyID, arg.FlagKey)
	var i CompanyFeatureFlags
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FlagKey,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyFeatureFlags = `-- name: GetCompanyFeatureFlags :many
SELECT cff.id, cff.company_id, cff.flag_key, cff.is_enabled, cff.created_at, cff.updated_at, ff.description
FROM company_feature_flags cff
JOIN feature_flags ff ON cff.flag_key = ff.flag_key
WHERE cff.company_id = $1
ORDER BY cff.flag_key
`

type GetCompanyFeatureFlagsRow struct {
	ID          uuid.UUID          `json:"id"`
	CompanyID   uuid.UUID          `json:"company_id"`
	FlagKey     string             `json:"flag_key"`
	IsEnabled   bool               `json:"is_enabled"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	Description pgtype.Text        `json:"description"`
}

func (q *Queries) GetCompanyFeatureFlags(ctx context.Context, companyID uuid.UUID) ([]GetCompanyFeatureFlagsRow, error) {
	rows, err := q.db.Query(ctx, getCompanyFeatureFlags, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCompanyFeatureFlagsRow{}
	for rows.Next() {
		var i GetCompanyFeatureFlagsRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.FlagKey,
			&i.IsEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanySetting = `-- name: GetCompanySetting :one
SELECT id, company_id, setting_key, setting_value, data_type, description, created_at, updated_at FROM company_settings 
WHERE company_id = $1 AND setting_key = $2
`

type GetCompanySettingParams struct {
	CompanyID  uuid.UUID `json:"company_id"`
	SettingKey string    `json:"setting_key"`
}

func (q *Queries) GetCompanySetting(ctx context.Context, arg GetCompanySettingParams) (CompanySettings, error) {
	row := q.db.QueryRow(ctx, getCompanySetting, arg.CompanyID, arg.SettingKey)
	var i CompanySettings
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanySettings = `-- name: GetCompanySettings :many
SELECT id, company_id, setting_key, setting_value, data_type, description, created_at, updated_at FROM company_settings 
WHERE company_id = $1
ORDER BY setting_key
`

func (q *Queries) GetCompanySettings(ctx context.Context, companyID uuid.UUID) ([]CompanySettings, error) {
	rows, err := q.db.Query(ctx, getCompanySettings, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CompanySettings{}
	for rows.Next() {
		var i CompanySettings
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.SettingKey,
			&i.SettingValue,
			&i.DataType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureFlag = `-- name: GetFeatureFlag :one
SELECT id, flag_key, description, is_enabled, rollout_percentage, conditions, created_at, updated_at FROM feature_flags WHERE flag_key = $1
`

func (q *Queries) GetFeatureFlag(ctx context.Context, flagKey string) (FeatureFlags, error) {
	row := q.db.QueryRow(ctx, getFeatureFlag, flagKey)
	var i FeatureFlags
	err := row.Scan(
		&i.ID,
		&i.FlagKey,
		&i.Description,
		&i.IsEnabled,
		&i.RolloutPercentage,
		&i.Conditions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPublicSystemSettings = `-- name: GetPublicSystemSettings :many
SELECT setting_key, setting_value, data_type, description 
FROM system_settings 
WHERE is_sensitive = FALSE
ORDER BY setting_key
`

type GetPublicSystemSettingsRow struct {
	SettingKey   string      `json:"setting_key"`
	SettingValue pgtype.Text `json:"setting_value"`
	DataType     string      `json:"data_type"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) GetPublicSystemSettings(ctx context.Context) ([]GetPublicSystemSettingsRow, error) {
	rows, err := q.db.Query(ctx, getPublicSystemSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPublicSystemSettingsRow{}
	for rows.Next() {
		var i GetPublicSystemSettingsRow
		if err := rows.Scan(
			&i.SettingKey,
			&i.SettingValue,
			&i.DataType,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemSetting = `-- name: GetSystemSetting :one
SELECT id, setting_key, setting_value, data_type, description, is_sensitive, created_at, updated_at FROM system_settings 
WHERE setting_key = $1
`

func (q *Queries) GetSystemSetting(ctx context.Context, settingKey string) (SystemSettings, error) {
	row := q.db.QueryRow(ctx, getSystemSetting, settingKey)
	var i SystemSettings
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.Description,
		&i.IsSensitive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFeatureFlag = `-- name: GetUserFeatureFlag :one
SELECT id, user_id, flag_key, is_enabled, created_at, updated_at FROM user_feature_flags 
WHERE user_id = $1 AND flag_key = $2
`

type GetUserFeatureFlagParams struct {
	UserID  uuid.UUID `json:"user_id"`
	FlagKey string    `json:"flag_key"`
}

func (q *Queries) GetUserFeatureFlag(ctx context.Context, arg GetUserFeatureFlagParams) (UserFeatureFlags, error) {
	row := q.db.QueryRow(ctx, getUserFeatureFlag, arg.UserID, arg.FlagKey)
	var i UserFeatureFlags
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FlagKey,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFeatureFlags = `-- name: GetUserFeatureFlags :many
SELECT uff.id, uff.user_id, uff.flag_key, uff.is_enabled, uff.created_at, uff.updated_at, ff.description
FROM user_feature_flags uff
JOIN feature_flags ff ON uff.flag_key = ff.flag_key
WHERE uff.user_id = $1
ORDER BY uff.flag_key
`

type GetUserFeatureFlagsRow struct {
	ID          uuid.UUID          `json:"id"`
	UserID      uuid.UUID          `json:"user_id"`
	FlagKey     string             `json:"flag_key"`
	IsEnabled   bool               `json:"is_enabled"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	Description pgtype.Text        `json:"description"`
}

func (q *Queries) GetUserFeatureFlags(ctx context.Context, userID uuid.UUID) ([]GetUserFeatureFlagsRow, error) {
	rows, err := q.db.Query(ctx, getUserFeatureFlags, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserFeatureFlagsRow{}
	for rows.Next() {
		var i GetUserFeatureFlagsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FlagKey,
			&i.IsEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSetting = `-- name: GetUserSetting :one
SELECT id, user_id, setting_key, setting_value, data_type, created_at, updated_at FROM user_settings 
WHERE user_id = $1 AND setting_key = $2
`

type GetUserSettingParams struct {
	UserID     uuid.UUID `json:"user_id"`
	SettingKey string    `json:"setting_key"`
}

func (q *Queries) GetUserSetting(ctx context.Context, arg GetUserSettingParams) (UserSettings, error) {
	row := q.db.QueryRow(ctx, getUserSetting, arg.UserID, arg.SettingKey)
	var i UserSettings
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSettings = `-- name: GetUserSettings :many
SELECT id, user_id, setting_key, setting_value, data_type, created_at, updated_at FROM user_settings 
WHERE user_id = $1
ORDER BY setting_key
`

func (q *Queries) GetUserSettings(ctx context.Context, userID uuid.UUID) ([]UserSettings, error) {
	rows, err := q.db.Query(ctx, getUserSettings, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSettings{}
	for rows.Next() {
		var i UserSettings
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SettingKey,
			&i.SettingValue,
			&i.DataType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompanyFeatureFlag = `-- name: UpdateCompanyFeatureFlag :one
UPDATE company_feature_flags SET
  is_enabled = $1,
  updated_at = NOW()
WHERE company_id = $2 AND flag_key = $3
RETURNING id, company_id, flag_key, is_enabled, created_at, updated_at
`

type UpdateCompanyFeatureFlagParams struct {
	IsEnabled bool      `json:"is_enabled"`
	CompanyID uuid.UUID `json:"company_id"`
	FlagKey   string    `json:"flag_key"`
}

func (q *Queries) UpdateCompanyFeatureFlag(ctx context.Context, arg UpdateCompanyFeatureFlagParams) (CompanyFeatureFlags, error) {
	row := q.db.QueryRow(ctx, updateCompanyFeatureFlag, arg.IsEnabled, arg.CompanyID, arg.FlagKey)
	var i CompanyFeatureFlags
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FlagKey,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCompanySetting = `-- name: UpdateCompanySetting :one
UPDATE company_settings SET
  setting_value = $1,
  data_type = COALESCE($2, data_type),
  description = COALESCE($3, description),
  updated_at = NOW()
WHERE company_id = $4 AND setting_key = $5
RETURNING id, company_id, setting_key, setting_value, data_type, description, created_at, updated_at
`

type UpdateCompanySettingParams struct {
	SettingValue pgtype.Text `json:"setting_value"`
	DataType     string      `json:"data_type"`
	Description  pgtype.Text `json:"description"`
	CompanyID    uuid.UUID   `json:"company_id"`
	SettingKey   string      `json:"setting_key"`
}

func (q *Queries) UpdateCompanySetting(ctx context.Context, arg UpdateCompanySettingParams) (CompanySettings, error) {
	row := q.db.QueryRow(ctx, updateCompanySetting,
		arg.SettingValue,
		arg.DataType,
		arg.Description,
		arg.CompanyID,
		arg.SettingKey,
	)
	var i CompanySettings
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFeatureFlag = `-- name: UpdateFeatureFlag :one
UPDATE feature_flags SET
  description = COALESCE($1, description),
  is_enabled = COALESCE($2, is_enabled),
  rollout_percentage = COALESCE($3, rollout_percentage),
  conditions = COALESCE($4, conditions),
  updated_at = NOW()
WHERE flag_key = $5
RETURNING id, flag_key, description, is_enabled, rollout_percentage, conditions, created_at, updated_at
`

type UpdateFeatureFlagParams struct {
	Description       pgtype.Text `json:"description"`
	IsEnabled         pgtype.Bool `json:"is_enabled"`
	RolloutPercentage pgtype.Int4 `json:"rollout_percentage"`
	Conditions        []byte      `json:"conditions"`
	FlagKey           string      `json:"flag_key"`
}

func (q *Queries) UpdateFeatureFlag(ctx context.Context, arg UpdateFeatureFlagParams) (FeatureFlags, error) {
	row := q.db.QueryRow(ctx, updateFeatureFlag,
		arg.Description,
		arg.IsEnabled,
		arg.RolloutPercentage,
		arg.Conditions,
		arg.FlagKey,
	)
	var i FeatureFlags
	err := row.Scan(
		&i.ID,
		&i.FlagKey,
		&i.Description,
		&i.IsEnabled,
		&i.RolloutPercentage,
		&i.Conditions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSystemSetting = `-- name: UpdateSystemSetting :one
UPDATE system_settings SET
  setting_value = $1,
  data_type = COALESCE($2, data_type),
  description = COALESCE($3, description),
  is_sensitive = COALESCE($4, is_sensitive),
  updated_at = NOW()
WHERE setting_key = $5
RETURNING id, setting_key, setting_value, data_type, description, is_sensitive, created_at, updated_at
`

type UpdateSystemSettingParams struct {
	SettingValue pgtype.Text `json:"setting_value"`
	DataType     string      `json:"data_type"`
	Description  pgtype.Text `json:"description"`
	IsSensitive  pgtype.Bool `json:"is_sensitive"`
	SettingKey   string      `json:"setting_key"`
}

func (q *Queries) UpdateSystemSetting(ctx context.Context, arg UpdateSystemSettingParams) (SystemSettings, error) {
	row := q.db.QueryRow(ctx, updateSystemSetting,
		arg.SettingValue,
		arg.DataType,
		arg.Description,
		arg.IsSensitive,
		arg.SettingKey,
	)
	var i SystemSettings
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.Description,
		&i.IsSensitive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserFeatureFlag = `-- name: UpdateUserFeatureFlag :one
UPDATE user_feature_flags SET
  is_enabled = $1,
  updated_at = NOW()
WHERE user_id = $2 AND flag_key = $3
RETURNING id, user_id, flag_key, is_enabled, created_at, updated_at
`

type UpdateUserFeatureFlagParams struct {
	IsEnabled bool      `json:"is_enabled"`
	UserID    uuid.UUID `json:"user_id"`
	FlagKey   string    `json:"flag_key"`
}

func (q *Queries) UpdateUserFeatureFlag(ctx context.Context, arg UpdateUserFeatureFlagParams) (UserFeatureFlags, error) {
	row := q.db.QueryRow(ctx, updateUserFeatureFlag, arg.IsEnabled, arg.UserID, arg.FlagKey)
	var i UserFeatureFlags
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FlagKey,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSetting = `-- name: UpdateUserSetting :one
UPDATE user_settings SET
  setting_value = $1,
  data_type = COALESCE($2, data_type),
  updated_at = NOW()
WHERE user_id = $3 AND setting_key = $4
RETURNING id, user_id, setting_key, setting_value, data_type, created_at, updated_at
`

type UpdateUserSettingParams struct {
	SettingValue pgtype.Text `json:"setting_value"`
	DataType     string      `json:"data_type"`
	UserID       uuid.UUID   `json:"user_id"`
	SettingKey   string      `json:"setting_key"`
}

func (q *Queries) UpdateUserSetting(ctx context.Context, arg UpdateUserSettingParams) (UserSettings, error) {
	row := q.db.QueryRow(ctx, updateUserSetting,
		arg.SettingValue,
		arg.DataType,
		arg.UserID,
		arg.SettingKey,
	)
	var i UserSettings
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
