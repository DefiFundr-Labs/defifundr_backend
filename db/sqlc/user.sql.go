// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const changePassword = `-- name: ChangePassword :one

UPDATE users
SET
    hashed_password = $2,
    password_changed_at = $3
WHERE username = $1 RETURNING username, hashed_password, avatar, email, is_email_verified, password_changed_at, balance, biometrics, address, file_path, secret_code, is_used, is_first_time, created_at, expired_at
`

type ChangePasswordParams struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, changePassword, arg.Username, arg.HashedPassword, arg.PasswordChangedAt)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.Balance,
		&i.Biometrics,
		&i.Address,
		&i.FilePath,
		&i.SecretCode,
		&i.IsUsed,
		&i.IsFirstTime,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const checkUsernameExists = `-- name: CheckUsernameExists :one

SELECT EXISTS (
        SELECT 1
        FROM users
        WHERE username = $1
        LIMIT 1
    )
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO
    users (
        username,
        avatar,
        email,
        balance,
        address,
        file_path,
        secret_code,
        is_used,
        is_first_time,
        is_email_verified
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10
    ) RETURNING username, hashed_password, avatar, email, is_email_verified, password_changed_at, balance, biometrics, address, file_path, secret_code, is_used, is_first_time, created_at, expired_at
`

type CreateUserParams struct {
	Username        string `json:"username"`
	Avatar          string `json:"avatar"`
	Email           string `json:"email"`
	Balance         string `json:"balance"`
	Address         string `json:"address"`
	FilePath        string `json:"file_path"`
	SecretCode      string `json:"secret_code"`
	IsUsed          bool   `json:"is_used"`
	IsFirstTime     bool   `json:"is_first_time"`
	IsEmailVerified bool   `json:"is_email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Avatar,
		arg.Email,
		arg.Balance,
		arg.Address,
		arg.FilePath,
		arg.SecretCode,
		arg.IsUsed,
		arg.IsFirstTime,
		arg.IsEmailVerified,
	)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.Balance,
		&i.Biometrics,
		&i.Address,
		&i.FilePath,
		&i.SecretCode,
		&i.IsUsed,
		&i.IsFirstTime,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one

DELETE FROM users WHERE username = $1 RETURNING username, hashed_password, avatar, email, is_email_verified, password_changed_at, balance, biometrics, address, file_path, secret_code, is_used, is_first_time, created_at, expired_at
`

func (q *Queries) DeleteUser(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.Balance,
		&i.Biometrics,
		&i.Address,
		&i.FilePath,
		&i.SecretCode,
		&i.IsUsed,
		&i.IsFirstTime,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT username, hashed_password, avatar, email, is_email_verified, password_changed_at, balance, biometrics, address, file_path, secret_code, is_used, is_first_time, created_at, expired_at FROM users WHERE username = $1 OR email = $1 OR address = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.Balance,
		&i.Biometrics,
		&i.Address,
		&i.FilePath,
		&i.SecretCode,
		&i.IsUsed,
		&i.IsFirstTime,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getUserByAddress = `-- name: GetUserByAddress :one
SELECT username, hashed_password, avatar, email, is_email_verified, password_changed_at, balance, biometrics, address, file_path, secret_code, is_used, is_first_time, created_at, expired_at FROM users WHERE address = $1 LIMIT 1
`

func (q *Queries) GetUserByAddress(ctx context.Context, address string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUserByAddress, address)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.Balance,
		&i.Biometrics,
		&i.Address,
		&i.FilePath,
		&i.SecretCode,
		&i.IsUsed,
		&i.IsFirstTime,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one

UPDATE users
SET
    username = COALESCE($1, username),
    hashed_password = COALESCE(
        $2,
        hashed_password
    ),
    password_changed_at = COALESCE(
        $3,
        password_changed_at
    ),
    email = COALESCE($4, email),
    is_email_verified = COALESCE(
        $5,
        is_email_verified
    ),
    avatar = COALESCE($6, avatar),
    balance = COALESCE($7, balance),
    secret_code = COALESCE(
        $8,
        secret_code
    ),
    biometrics = COALESCE(
        $9,
        biometrics
    ),
    expired_at = COALESCE(
        $10,
        expired_at
    ),
    is_used = COALESCE($11, is_used),
    is_first_time = COALESCE(
        $12,
        is_first_time
    )
WHERE
    username = $1 RETURNING username, hashed_password, avatar, email, is_email_verified, password_changed_at, balance, biometrics, address, file_path, secret_code, is_used, is_first_time, created_at, expired_at
`

type UpdateUserParams struct {
	Username          sql.NullString `json:"username"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	Email             sql.NullString `json:"email"`
	IsEmailVerified   sql.NullBool   `json:"is_email_verified"`
	Avatar            sql.NullString `json:"avatar"`
	Balance           sql.NullString `json:"balance"`
	SecretCode        sql.NullString `json:"secret_code"`
	Biometrics        sql.NullBool   `json:"biometrics"`
	ExpiredAt         sql.NullTime   `json:"expired_at"`
	IsUsed            sql.NullBool   `json:"is_used"`
	IsFirstTime       sql.NullBool   `json:"is_first_time"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.Email,
		arg.IsEmailVerified,
		arg.Avatar,
		arg.Balance,
		arg.SecretCode,
		arg.Biometrics,
		arg.ExpiredAt,
		arg.IsUsed,
		arg.IsFirstTime,
	)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.Balance,
		&i.Biometrics,
		&i.Address,
		&i.FilePath,
		&i.SecretCode,
		&i.IsUsed,
		&i.IsFirstTime,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
