// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_wallet_addresses.sql

package db

import (
	"context"
)

const checkWalletExists = `-- name: CheckWalletExists :one

SELECT EXISTS (
    SELECT 1 FROM user_wallet_addresses WHERE wallet_address = $1 AND user_id = $2 LIMIT 1
)
`

type CheckWalletExistsParams struct {
	WalletAddress string `json:"wallet_address"`
	UserID        string `json:"user_id"`
}

func (q *Queries) CheckWalletExists(ctx context.Context, arg CheckWalletExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkWalletExists, arg.WalletAddress, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserWallet = `-- name: CreateUserWallet :one

INSERT INTO user_wallet_addresses (
    user_id,
    wallet_address,
    chain,
    status
) VALUES ($1, $2, $3, $4)
RETURNING id, user_id, wallet_address, chain, status, created_at, updated_at, deleted_at
`

type CreateUserWalletParams struct {
	UserID        string                      `json:"user_id"`
	WalletAddress string                      `json:"wallet_address"`
	Chain         string                      `json:"chain"`
	Status        UserWalletAddressesStatuses `json:"status"`
}

func (q *Queries) CreateUserWallet(ctx context.Context, arg CreateUserWalletParams) (UserWalletAddresses, error) {
	row := q.db.QueryRowContext(ctx, createUserWallet,
		arg.UserID,
		arg.WalletAddress,
		arg.Chain,
		arg.Status,
	)
	var i UserWalletAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserWallets = `-- name: GetUserWallets :many

SELECT id, user_id, wallet_address, chain, status, created_at, updated_at, deleted_at FROM user_wallet_addresses
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserWalletsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetUserWallets(ctx context.Context, arg GetUserWalletsParams) ([]UserWalletAddresses, error) {
	rows, err := q.db.QueryContext(ctx, getUserWallets, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserWalletAddresses{}
	for rows.Next() {
		var i UserWalletAddresses
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WalletAddress,
			&i.Chain,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalletByAddress = `-- name: GetWalletByAddress :one

SELECT id, user_id, wallet_address, chain, status, created_at, updated_at, deleted_at FROM user_wallet_addresses WHERE wallet_address = $1 AND user_id = $2 LIMIT 1
`

type GetWalletByAddressParams struct {
	WalletAddress string `json:"wallet_address"`
	UserID        string `json:"user_id"`
}

func (q *Queries) GetWalletByAddress(ctx context.Context, arg GetWalletByAddressParams) (UserWalletAddresses, error) {
	row := q.db.QueryRowContext(ctx, getWalletByAddress, arg.WalletAddress, arg.UserID)
	var i UserWalletAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWalletById = `-- name: GetWalletById :one

SELECT id, user_id, wallet_address, chain, status, created_at, updated_at, deleted_at FROM user_wallet_addresses WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetWalletByIdParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetWalletById(ctx context.Context, arg GetWalletByIdParams) (UserWalletAddresses, error) {
	row := q.db.QueryRowContext(ctx, getWalletById, arg.ID, arg.UserID)
	var i UserWalletAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteUserWallet = `-- name: HardDeleteUserWallet :one

DELETE FROM user_wallet_addresses WHERE wallet_address = $1 AND user_id = $2 RETURNING id, user_id, wallet_address, chain, status, created_at, updated_at, deleted_at
`

type HardDeleteUserWalletParams struct {
	WalletAddress string `json:"wallet_address"`
	UserID        string `json:"user_id"`
}

func (q *Queries) HardDeleteUserWallet(ctx context.Context, arg HardDeleteUserWalletParams) (UserWalletAddresses, error) {
	row := q.db.QueryRowContext(ctx, hardDeleteUserWallet, arg.WalletAddress, arg.UserID)
	var i UserWalletAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteUserWallet = `-- name: SoftDeleteUserWallet :one

UPDATE user_wallet_addresses
SET deleted_at = now(), updated_at = now(), status = 'deleted'
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, wallet_address, chain, status, created_at, updated_at, deleted_at
`

type SoftDeleteUserWalletParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) SoftDeleteUserWallet(ctx context.Context, arg SoftDeleteUserWalletParams) (UserWalletAddresses, error) {
	row := q.db.QueryRowContext(ctx, softDeleteUserWallet, arg.ID, arg.UserID)
	var i UserWalletAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserWalletStatus = `-- name: UpdateUserWalletStatus :one

UPDATE user_wallet_addresses
SET status = $3, updated_at = now()
WHERE wallet_address = $1 AND user_id = $2
RETURNING id, user_id, wallet_address, chain, status, created_at, updated_at, deleted_at
`

type UpdateUserWalletStatusParams struct {
	WalletAddress string                      `json:"wallet_address"`
	UserID        string                      `json:"user_id"`
	Status        UserWalletAddressesStatuses `json:"status"`
}

func (q *Queries) UpdateUserWalletStatus(ctx context.Context, arg UpdateUserWalletStatusParams) (UserWalletAddresses, error) {
	row := q.db.QueryRowContext(ctx, updateUserWalletStatus, arg.WalletAddress, arg.UserID, arg.Status)
	var i UserWalletAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
