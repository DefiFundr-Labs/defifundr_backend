// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/demola234/defifundr/internal/core/domain"
	"github.com/demola234/defifundr/internal/core/ports"
	"github.com/google/uuid"
)

type FakeUserService struct {
	GetUserByIDStub        func(context.Context, uuid.UUID) (*domain.User, error)
	getUserByIDMutex       sync.RWMutex
	getUserByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getUserByIDReturns struct {
		result1 *domain.User
		result2 error
	}
	getUserByIDReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	ResetUserPasswordStub        func(context.Context, uuid.UUID, string) error
	resetUserPasswordMutex       sync.RWMutex
	resetUserPasswordArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}
	resetUserPasswordReturns struct {
		result1 error
	}
	resetUserPasswordReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateKYCStub        func(context.Context, domain.KYC) error
	updateKYCMutex       sync.RWMutex
	updateKYCArgsForCall []struct {
		arg1 context.Context
		arg2 domain.KYC
	}
	updateKYCReturns struct {
		result1 error
	}
	updateKYCReturnsOnCall map[int]struct {
		result1 error
	}
	UpdatePasswordStub        func(context.Context, uuid.UUID, string, string) error
	updatePasswordMutex       sync.RWMutex
	updatePasswordArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
		arg4 string
	}
	updatePasswordReturns struct {
		result1 error
	}
	updatePasswordReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateUserStub        func(context.Context, domain.User) (*domain.User, error)
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 context.Context
		arg2 domain.User
	}
	updateUserReturns struct {
		result1 *domain.User
		result2 error
	}
	updateUserReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserService) GetUserByID(arg1 context.Context, arg2 uuid.UUID) (*domain.User, error) {
	fake.getUserByIDMutex.Lock()
	ret, specificReturn := fake.getUserByIDReturnsOnCall[len(fake.getUserByIDArgsForCall)]
	fake.getUserByIDArgsForCall = append(fake.getUserByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetUserByIDStub
	fakeReturns := fake.getUserByIDReturns
	fake.recordInvocation("GetUserByID", []interface{}{arg1, arg2})
	fake.getUserByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserService) GetUserByIDCallCount() int {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	return len(fake.getUserByIDArgsForCall)
}

func (fake *FakeUserService) GetUserByIDCalls(stub func(context.Context, uuid.UUID) (*domain.User, error)) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = stub
}

func (fake *FakeUserService) GetUserByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	argsForCall := fake.getUserByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserService) GetUserByIDReturns(result1 *domain.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	fake.getUserByIDReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) GetUserByIDReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	if fake.getUserByIDReturnsOnCall == nil {
		fake.getUserByIDReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.getUserByIDReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) ResetUserPassword(arg1 context.Context, arg2 uuid.UUID, arg3 string) error {
	fake.resetUserPasswordMutex.Lock()
	ret, specificReturn := fake.resetUserPasswordReturnsOnCall[len(fake.resetUserPasswordArgsForCall)]
	fake.resetUserPasswordArgsForCall = append(fake.resetUserPasswordArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ResetUserPasswordStub
	fakeReturns := fake.resetUserPasswordReturns
	fake.recordInvocation("ResetUserPassword", []interface{}{arg1, arg2, arg3})
	fake.resetUserPasswordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserService) ResetUserPasswordCallCount() int {
	fake.resetUserPasswordMutex.RLock()
	defer fake.resetUserPasswordMutex.RUnlock()
	return len(fake.resetUserPasswordArgsForCall)
}

func (fake *FakeUserService) ResetUserPasswordCalls(stub func(context.Context, uuid.UUID, string) error) {
	fake.resetUserPasswordMutex.Lock()
	defer fake.resetUserPasswordMutex.Unlock()
	fake.ResetUserPasswordStub = stub
}

func (fake *FakeUserService) ResetUserPasswordArgsForCall(i int) (context.Context, uuid.UUID, string) {
	fake.resetUserPasswordMutex.RLock()
	defer fake.resetUserPasswordMutex.RUnlock()
	argsForCall := fake.resetUserPasswordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserService) ResetUserPasswordReturns(result1 error) {
	fake.resetUserPasswordMutex.Lock()
	defer fake.resetUserPasswordMutex.Unlock()
	fake.ResetUserPasswordStub = nil
	fake.resetUserPasswordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) ResetUserPasswordReturnsOnCall(i int, result1 error) {
	fake.resetUserPasswordMutex.Lock()
	defer fake.resetUserPasswordMutex.Unlock()
	fake.ResetUserPasswordStub = nil
	if fake.resetUserPasswordReturnsOnCall == nil {
		fake.resetUserPasswordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetUserPasswordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) UpdateKYC(arg1 context.Context, arg2 domain.KYC) error {
	fake.updateKYCMutex.Lock()
	ret, specificReturn := fake.updateKYCReturnsOnCall[len(fake.updateKYCArgsForCall)]
	fake.updateKYCArgsForCall = append(fake.updateKYCArgsForCall, struct {
		arg1 context.Context
		arg2 domain.KYC
	}{arg1, arg2})
	stub := fake.UpdateKYCStub
	fakeReturns := fake.updateKYCReturns
	fake.recordInvocation("UpdateKYC", []interface{}{arg1, arg2})
	fake.updateKYCMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserService) UpdateKYCCallCount() int {
	fake.updateKYCMutex.RLock()
	defer fake.updateKYCMutex.RUnlock()
	return len(fake.updateKYCArgsForCall)
}

func (fake *FakeUserService) UpdateKYCCalls(stub func(context.Context, domain.KYC) error) {
	fake.updateKYCMutex.Lock()
	defer fake.updateKYCMutex.Unlock()
	fake.UpdateKYCStub = stub
}

func (fake *FakeUserService) UpdateKYCArgsForCall(i int) (context.Context, domain.KYC) {
	fake.updateKYCMutex.RLock()
	defer fake.updateKYCMutex.RUnlock()
	argsForCall := fake.updateKYCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserService) UpdateKYCReturns(result1 error) {
	fake.updateKYCMutex.Lock()
	defer fake.updateKYCMutex.Unlock()
	fake.UpdateKYCStub = nil
	fake.updateKYCReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) UpdateKYCReturnsOnCall(i int, result1 error) {
	fake.updateKYCMutex.Lock()
	defer fake.updateKYCMutex.Unlock()
	fake.UpdateKYCStub = nil
	if fake.updateKYCReturnsOnCall == nil {
		fake.updateKYCReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateKYCReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) UpdatePassword(arg1 context.Context, arg2 uuid.UUID, arg3 string, arg4 string) error {
	fake.updatePasswordMutex.Lock()
	ret, specificReturn := fake.updatePasswordReturnsOnCall[len(fake.updatePasswordArgsForCall)]
	fake.updatePasswordArgsForCall = append(fake.updatePasswordArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdatePasswordStub
	fakeReturns := fake.updatePasswordReturns
	fake.recordInvocation("UpdatePassword", []interface{}{arg1, arg2, arg3, arg4})
	fake.updatePasswordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserService) UpdatePasswordCallCount() int {
	fake.updatePasswordMutex.RLock()
	defer fake.updatePasswordMutex.RUnlock()
	return len(fake.updatePasswordArgsForCall)
}

func (fake *FakeUserService) UpdatePasswordCalls(stub func(context.Context, uuid.UUID, string, string) error) {
	fake.updatePasswordMutex.Lock()
	defer fake.updatePasswordMutex.Unlock()
	fake.UpdatePasswordStub = stub
}

func (fake *FakeUserService) UpdatePasswordArgsForCall(i int) (context.Context, uuid.UUID, string, string) {
	fake.updatePasswordMutex.RLock()
	defer fake.updatePasswordMutex.RUnlock()
	argsForCall := fake.updatePasswordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeUserService) UpdatePasswordReturns(result1 error) {
	fake.updatePasswordMutex.Lock()
	defer fake.updatePasswordMutex.Unlock()
	fake.UpdatePasswordStub = nil
	fake.updatePasswordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) UpdatePasswordReturnsOnCall(i int, result1 error) {
	fake.updatePasswordMutex.Lock()
	defer fake.updatePasswordMutex.Unlock()
	fake.UpdatePasswordStub = nil
	if fake.updatePasswordReturnsOnCall == nil {
		fake.updatePasswordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updatePasswordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) UpdateUser(arg1 context.Context, arg2 domain.User) (*domain.User, error) {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 context.Context
		arg2 domain.User
	}{arg1, arg2})
	stub := fake.UpdateUserStub
	fakeReturns := fake.updateUserReturns
	fake.recordInvocation("UpdateUser", []interface{}{arg1, arg2})
	fake.updateUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserService) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeUserService) UpdateUserCalls(stub func(context.Context, domain.User) (*domain.User, error)) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeUserService) UpdateUserArgsForCall(i int) (context.Context, domain.User) {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserService) UpdateUserReturns(result1 *domain.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) UpdateUserReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	fake.resetUserPasswordMutex.RLock()
	defer fake.resetUserPasswordMutex.RUnlock()
	fake.updateKYCMutex.RLock()
	defer fake.updateKYCMutex.RUnlock()
	fake.updatePasswordMutex.RLock()
	defer fake.updatePasswordMutex.RUnlock()
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ports.UserService = new(FakeUserService)
