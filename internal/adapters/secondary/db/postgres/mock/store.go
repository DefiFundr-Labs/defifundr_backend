// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/secondary/db/postgres/sqlc/querier.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/defifundr/defifundr-backend/internal/adapters/secondary/db/postgres/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddOrganizationMember mocks base method.
func (m *MockQuerier) AddOrganizationMember(ctx context.Context, arg sqlc.AddOrganizationMemberParams) (sqlc.OrganizationMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrganizationMember", ctx, arg)
	ret0, _ := ret[0].(sqlc.OrganizationMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrganizationMember indicates an expected call of AddOrganizationMember.
func (mr *MockQuerierMockRecorder) AddOrganizationMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrganizationMember", reflect.TypeOf((*MockQuerier)(nil).AddOrganizationMember), ctx, arg)
}

// AddPayrollEmployee mocks base method.
func (m *MockQuerier) AddPayrollEmployee(ctx context.Context, arg sqlc.AddPayrollEmployeeParams) (sqlc.PayrollEmployees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPayrollEmployee", ctx, arg)
	ret0, _ := ret[0].(sqlc.PayrollEmployees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPayrollEmployee indicates an expected call of AddPayrollEmployee.
func (mr *MockQuerierMockRecorder) AddPayrollEmployee(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPayrollEmployee", reflect.TypeOf((*MockQuerier)(nil).AddPayrollEmployee), ctx, arg)
}

// BlockSession mocks base method.
func (m *MockQuerier) BlockSession(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockSession indicates an expected call of BlockSession.
func (mr *MockQuerierMockRecorder) BlockSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSession", reflect.TypeOf((*MockQuerier)(nil).BlockSession), ctx, id)
}

// CreateInvoice mocks base method.
func (m *MockQuerier) CreateInvoice(ctx context.Context, arg sqlc.CreateInvoiceParams) (sqlc.Invoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, arg)
	ret0, _ := ret[0].(sqlc.Invoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockQuerierMockRecorder) CreateInvoice(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockQuerier)(nil).CreateInvoice), ctx, arg)
}

// CreateKYC mocks base method.
func (m *MockQuerier) CreateKYC(ctx context.Context, arg sqlc.CreateKYCParams) (sqlc.Kyc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKYC", ctx, arg)
	ret0, _ := ret[0].(sqlc.Kyc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKYC indicates an expected call of CreateKYC.
func (mr *MockQuerierMockRecorder) CreateKYC(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKYC", reflect.TypeOf((*MockQuerier)(nil).CreateKYC), ctx, arg)
}

// CreateNotification mocks base method.
func (m *MockQuerier) CreateNotification(ctx context.Context, arg sqlc.CreateNotificationParams) (sqlc.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, arg)
	ret0, _ := ret[0].(sqlc.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockQuerierMockRecorder) CreateNotification(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockQuerier)(nil).CreateNotification), ctx, arg)
}

// CreateOrganization mocks base method.
func (m *MockQuerier) CreateOrganization(ctx context.Context, arg sqlc.CreateOrganizationParams) (sqlc.Organizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, arg)
	ret0, _ := ret[0].(sqlc.Organizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockQuerierMockRecorder) CreateOrganization(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockQuerier)(nil).CreateOrganization), ctx, arg)
}

// CreatePayroll mocks base method.
func (m *MockQuerier) CreatePayroll(ctx context.Context, arg sqlc.CreatePayrollParams) (sqlc.Payrolls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayroll", ctx, arg)
	ret0, _ := ret[0].(sqlc.Payrolls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayroll indicates an expected call of CreatePayroll.
func (mr *MockQuerierMockRecorder) CreatePayroll(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayroll", reflect.TypeOf((*MockQuerier)(nil).CreatePayroll), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockQuerier) CreateSession(ctx context.Context, arg sqlc.CreateSessionParams) (sqlc.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(sqlc.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockQuerierMockRecorder) CreateSession(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQuerier)(nil).CreateSession), ctx, arg)
}

// CreateTransaction mocks base method.
func (m *MockQuerier) CreateTransaction(ctx context.Context, arg sqlc.CreateTransactionParams) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, arg)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockQuerierMockRecorder) CreateTransaction(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockQuerier)(nil).CreateTransaction), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg sqlc.CreateUserParams) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// CreateWallet mocks base method.
func (m *MockQuerier) CreateWallet(ctx context.Context, arg sqlc.CreateWalletParams) (sqlc.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, arg)
	ret0, _ := ret[0].(sqlc.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockQuerierMockRecorder) CreateWallet(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockQuerier)(nil).CreateWallet), ctx, arg)
}

// DeleteExpiredSessions mocks base method.
func (m *MockQuerier) DeleteExpiredSessions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredSessions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredSessions indicates an expected call of DeleteExpiredSessions.
func (mr *MockQuerierMockRecorder) DeleteExpiredSessions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredSessions", reflect.TypeOf((*MockQuerier)(nil).DeleteExpiredSessions), ctx)
}

// DeleteNotification mocks base method.
func (m *MockQuerier) DeleteNotification(ctx context.Context, arg sqlc.DeleteNotificationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockQuerierMockRecorder) DeleteNotification(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockQuerier)(nil).DeleteNotification), ctx, arg)
}

// DeleteOrganization mocks base method.
func (m *MockQuerier) DeleteOrganization(ctx context.Context, arg sqlc.DeleteOrganizationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockQuerierMockRecorder) DeleteOrganization(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockQuerier)(nil).DeleteOrganization), ctx, arg)
}

// DeletePayroll mocks base method.
func (m *MockQuerier) DeletePayroll(ctx context.Context, arg sqlc.DeletePayrollParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayroll", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayroll indicates an expected call of DeletePayroll.
func (mr *MockQuerierMockRecorder) DeletePayroll(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayroll", reflect.TypeOf((*MockQuerier)(nil).DeletePayroll), ctx, arg)
}

// DeleteSession mocks base method.
func (m *MockQuerier) DeleteSession(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockQuerierMockRecorder) DeleteSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockQuerier)(nil).DeleteSession), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), ctx, id)
}

// DeleteWallet mocks base method.
func (m *MockQuerier) DeleteWallet(ctx context.Context, arg sqlc.DeleteWalletParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockQuerierMockRecorder) DeleteWallet(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockQuerier)(nil).DeleteWallet), ctx, arg)
}

// GetInvoice mocks base method.
func (m *MockQuerier) GetInvoice(ctx context.Context, id uuid.UUID) (sqlc.Invoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", ctx, id)
	ret0, _ := ret[0].(sqlc.Invoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoice indicates an expected call of GetInvoice.
func (mr *MockQuerierMockRecorder) GetInvoice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockQuerier)(nil).GetInvoice), ctx, id)
}

// GetKYC mocks base method.
func (m *MockQuerier) GetKYC(ctx context.Context, userID uuid.UUID) (sqlc.Kyc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKYC", ctx, userID)
	ret0, _ := ret[0].(sqlc.Kyc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKYC indicates an expected call of GetKYC.
func (mr *MockQuerierMockRecorder) GetKYC(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKYC", reflect.TypeOf((*MockQuerier)(nil).GetKYC), ctx, userID)
}

// GetNotification mocks base method.
func (m *MockQuerier) GetNotification(ctx context.Context, id uuid.UUID) (sqlc.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", ctx, id)
	ret0, _ := ret[0].(sqlc.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockQuerierMockRecorder) GetNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockQuerier)(nil).GetNotification), ctx, id)
}

// GetOrganization mocks base method.
func (m *MockQuerier) GetOrganization(ctx context.Context, id uuid.UUID) (sqlc.Organizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, id)
	ret0, _ := ret[0].(sqlc.Organizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockQuerierMockRecorder) GetOrganization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockQuerier)(nil).GetOrganization), ctx, id)
}

// GetOrganizationMember mocks base method.
func (m *MockQuerier) GetOrganizationMember(ctx context.Context, arg sqlc.GetOrganizationMemberParams) (sqlc.OrganizationMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMember", ctx, arg)
	ret0, _ := ret[0].(sqlc.OrganizationMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationMember indicates an expected call of GetOrganizationMember.
func (mr *MockQuerierMockRecorder) GetOrganizationMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMember", reflect.TypeOf((*MockQuerier)(nil).GetOrganizationMember), ctx, arg)
}

// GetPayroll mocks base method.
func (m *MockQuerier) GetPayroll(ctx context.Context, id uuid.UUID) (sqlc.Payrolls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayroll", ctx, id)
	ret0, _ := ret[0].(sqlc.Payrolls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayroll indicates an expected call of GetPayroll.
func (mr *MockQuerierMockRecorder) GetPayroll(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayroll", reflect.TypeOf((*MockQuerier)(nil).GetPayroll), ctx, id)
}

// GetPayrollEmployee mocks base method.
func (m *MockQuerier) GetPayrollEmployee(ctx context.Context, arg sqlc.GetPayrollEmployeeParams) (sqlc.PayrollEmployees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollEmployee", ctx, arg)
	ret0, _ := ret[0].(sqlc.PayrollEmployees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollEmployee indicates an expected call of GetPayrollEmployee.
func (mr *MockQuerierMockRecorder) GetPayrollEmployee(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollEmployee", reflect.TypeOf((*MockQuerier)(nil).GetPayrollEmployee), ctx, arg)
}

// GetPrimaryWallet mocks base method.
func (m *MockQuerier) GetPrimaryWallet(ctx context.Context, userID uuid.UUID) (sqlc.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryWallet", ctx, userID)
	ret0, _ := ret[0].(sqlc.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryWallet indicates an expected call of GetPrimaryWallet.
func (mr *MockQuerierMockRecorder) GetPrimaryWallet(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryWallet", reflect.TypeOf((*MockQuerier)(nil).GetPrimaryWallet), ctx, userID)
}

// GetSession mocks base method.
func (m *MockQuerier) GetSession(ctx context.Context, id uuid.UUID) (sqlc.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(sqlc.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockQuerierMockRecorder) GetSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockQuerier)(nil).GetSession), ctx, id)
}

// GetSessionByRefreshToken mocks base method.
func (m *MockQuerier) GetSessionByRefreshToken(ctx context.Context, refreshToken string) (sqlc.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(sqlc.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByRefreshToken indicates an expected call of GetSessionByRefreshToken.
func (mr *MockQuerierMockRecorder) GetSessionByRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByRefreshToken", reflect.TypeOf((*MockQuerier)(nil).GetSessionByRefreshToken), ctx, refreshToken)
}

// GetTransaction mocks base method.
func (m *MockQuerier) GetTransaction(ctx context.Context, id uuid.UUID) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, id)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockQuerierMockRecorder) GetTransaction(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockQuerier)(nil).GetTransaction), ctx, id)
}

// GetTransactionByHash mocks base method.
func (m *MockQuerier) GetTransactionByHash(ctx context.Context, txHash string) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, txHash)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockQuerierMockRecorder) GetTransactionByHash(ctx, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockQuerier)(nil).GetTransactionByHash), ctx, txHash)
}

// GetUnreadNotificationCount mocks base method.
func (m *MockQuerier) GetUnreadNotificationCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadNotificationCount", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadNotificationCount indicates an expected call of GetUnreadNotificationCount.
func (mr *MockQuerierMockRecorder) GetUnreadNotificationCount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadNotificationCount", reflect.TypeOf((*MockQuerier)(nil).GetUnreadNotificationCount), ctx, userID)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(ctx context.Context, id uuid.UUID) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetWallet mocks base method.
func (m *MockQuerier) GetWallet(ctx context.Context, id uuid.UUID) (sqlc.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, id)
	ret0, _ := ret[0].(sqlc.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockQuerierMockRecorder) GetWallet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockQuerier)(nil).GetWallet), ctx, id)
}

// GetWalletByAddress mocks base method.
func (m *MockQuerier) GetWalletByAddress(ctx context.Context, walletAddress string) (sqlc.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByAddress", ctx, walletAddress)
	ret0, _ := ret[0].(sqlc.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByAddress indicates an expected call of GetWalletByAddress.
func (mr *MockQuerierMockRecorder) GetWalletByAddress(ctx, walletAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByAddress", reflect.TypeOf((*MockQuerier)(nil).GetWalletByAddress), ctx, walletAddress)
}

// ListEmployeePayrolls mocks base method.
func (m *MockQuerier) ListEmployeePayrolls(ctx context.Context, employeeID uuid.UUID) ([]sqlc.Payrolls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeePayrolls", ctx, employeeID)
	ret0, _ := ret[0].([]sqlc.Payrolls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeePayrolls indicates an expected call of ListEmployeePayrolls.
func (mr *MockQuerierMockRecorder) ListEmployeePayrolls(ctx, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeePayrolls", reflect.TypeOf((*MockQuerier)(nil).ListEmployeePayrolls), ctx, employeeID)
}

// ListEmployerInvoices mocks base method.
func (m *MockQuerier) ListEmployerInvoices(ctx context.Context, employerID uuid.UUID) ([]sqlc.ListEmployerInvoicesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployerInvoices", ctx, employerID)
	ret0, _ := ret[0].([]sqlc.ListEmployerInvoicesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployerInvoices indicates an expected call of ListEmployerInvoices.
func (mr *MockQuerierMockRecorder) ListEmployerInvoices(ctx, employerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployerInvoices", reflect.TypeOf((*MockQuerier)(nil).ListEmployerInvoices), ctx, employerID)
}

// ListEmployerOrganizations mocks base method.
func (m *MockQuerier) ListEmployerOrganizations(ctx context.Context, employerID uuid.UUID) ([]sqlc.Organizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployerOrganizations", ctx, employerID)
	ret0, _ := ret[0].([]sqlc.Organizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployerOrganizations indicates an expected call of ListEmployerOrganizations.
func (mr *MockQuerierMockRecorder) ListEmployerOrganizations(ctx, employerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployerOrganizations", reflect.TypeOf((*MockQuerier)(nil).ListEmployerOrganizations), ctx, employerID)
}

// ListEmployerPayrolls mocks base method.
func (m *MockQuerier) ListEmployerPayrolls(ctx context.Context, employerID uuid.UUID) ([]sqlc.Payrolls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployerPayrolls", ctx, employerID)
	ret0, _ := ret[0].([]sqlc.Payrolls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployerPayrolls indicates an expected call of ListEmployerPayrolls.
func (mr *MockQuerierMockRecorder) ListEmployerPayrolls(ctx, employerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployerPayrolls", reflect.TypeOf((*MockQuerier)(nil).ListEmployerPayrolls), ctx, employerID)
}

// ListFreelancerInvoices mocks base method.
func (m *MockQuerier) ListFreelancerInvoices(ctx context.Context, freelancerID uuid.UUID) ([]sqlc.ListFreelancerInvoicesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFreelancerInvoices", ctx, freelancerID)
	ret0, _ := ret[0].([]sqlc.ListFreelancerInvoicesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFreelancerInvoices indicates an expected call of ListFreelancerInvoices.
func (mr *MockQuerierMockRecorder) ListFreelancerInvoices(ctx, freelancerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFreelancerInvoices", reflect.TypeOf((*MockQuerier)(nil).ListFreelancerInvoices), ctx, freelancerID)
}

// ListOrganizationMembers mocks base method.
func (m *MockQuerier) ListOrganizationMembers(ctx context.Context, organizationID uuid.UUID) ([]sqlc.ListOrganizationMembersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationMembers", ctx, organizationID)
	ret0, _ := ret[0].([]sqlc.ListOrganizationMembersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationMembers indicates an expected call of ListOrganizationMembers.
func (mr *MockQuerierMockRecorder) ListOrganizationMembers(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationMembers", reflect.TypeOf((*MockQuerier)(nil).ListOrganizationMembers), ctx, organizationID)
}

// ListOrganizationPayrolls mocks base method.
func (m *MockQuerier) ListOrganizationPayrolls(ctx context.Context, organizationID pgtype.UUID) ([]sqlc.Payrolls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationPayrolls", ctx, organizationID)
	ret0, _ := ret[0].([]sqlc.Payrolls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationPayrolls indicates an expected call of ListOrganizationPayrolls.
func (mr *MockQuerierMockRecorder) ListOrganizationPayrolls(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationPayrolls", reflect.TypeOf((*MockQuerier)(nil).ListOrganizationPayrolls), ctx, organizationID)
}

// ListPayrollEmployees mocks base method.
func (m *MockQuerier) ListPayrollEmployees(ctx context.Context, payrollID uuid.UUID) ([]sqlc.ListPayrollEmployeesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayrollEmployees", ctx, payrollID)
	ret0, _ := ret[0].([]sqlc.ListPayrollEmployeesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayrollEmployees indicates an expected call of ListPayrollEmployees.
func (mr *MockQuerierMockRecorder) ListPayrollEmployees(ctx, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayrollEmployees", reflect.TypeOf((*MockQuerier)(nil).ListPayrollEmployees), ctx, payrollID)
}

// ListUserNotifications mocks base method.
func (m *MockQuerier) ListUserNotifications(ctx context.Context, arg sqlc.ListUserNotificationsParams) ([]sqlc.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserNotifications", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserNotifications indicates an expected call of ListUserNotifications.
func (mr *MockQuerierMockRecorder) ListUserNotifications(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserNotifications", reflect.TypeOf((*MockQuerier)(nil).ListUserNotifications), ctx, arg)
}

// ListUserOrganizationMemberships mocks base method.
func (m *MockQuerier) ListUserOrganizationMemberships(ctx context.Context, employeeID uuid.UUID) ([]sqlc.ListUserOrganizationMembershipsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOrganizationMemberships", ctx, employeeID)
	ret0, _ := ret[0].([]sqlc.ListUserOrganizationMembershipsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserOrganizationMemberships indicates an expected call of ListUserOrganizationMemberships.
func (mr *MockQuerierMockRecorder) ListUserOrganizationMemberships(ctx, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOrganizationMemberships", reflect.TypeOf((*MockQuerier)(nil).ListUserOrganizationMemberships), ctx, employeeID)
}

// ListUserSessions mocks base method.
func (m *MockQuerier) ListUserSessions(ctx context.Context, userID uuid.UUID) ([]sqlc.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserSessions", ctx, userID)
	ret0, _ := ret[0].([]sqlc.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserSessions indicates an expected call of ListUserSessions.
func (mr *MockQuerierMockRecorder) ListUserSessions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSessions", reflect.TypeOf((*MockQuerier)(nil).ListUserSessions), ctx, userID)
}

// ListUserTransactions mocks base method.
func (m *MockQuerier) ListUserTransactions(ctx context.Context, arg sqlc.ListUserTransactionsParams) ([]sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserTransactions", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserTransactions indicates an expected call of ListUserTransactions.
func (mr *MockQuerierMockRecorder) ListUserTransactions(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserTransactions", reflect.TypeOf((*MockQuerier)(nil).ListUserTransactions), ctx, arg)
}

// ListUserWallets mocks base method.
func (m *MockQuerier) ListUserWallets(ctx context.Context, userID uuid.UUID) ([]sqlc.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserWallets", ctx, userID)
	ret0, _ := ret[0].([]sqlc.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserWallets indicates an expected call of ListUserWallets.
func (mr *MockQuerierMockRecorder) ListUserWallets(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserWallets", reflect.TypeOf((*MockQuerier)(nil).ListUserWallets), ctx, userID)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context, arg sqlc.ListUsersParams) ([]sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx, arg)
}

// MarkAllUserNotificationsRead mocks base method.
func (m *MockQuerier) MarkAllUserNotificationsRead(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAllUserNotificationsRead", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAllUserNotificationsRead indicates an expected call of MarkAllUserNotificationsRead.
func (mr *MockQuerierMockRecorder) MarkAllUserNotificationsRead(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllUserNotificationsRead", reflect.TypeOf((*MockQuerier)(nil).MarkAllUserNotificationsRead), ctx, userID)
}

// MarkNotificationRead mocks base method.
func (m *MockQuerier) MarkNotificationRead(ctx context.Context, id uuid.UUID) (sqlc.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationRead", ctx, id)
	ret0, _ := ret[0].(sqlc.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkNotificationRead indicates an expected call of MarkNotificationRead.
func (mr *MockQuerierMockRecorder) MarkNotificationRead(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationRead", reflect.TypeOf((*MockQuerier)(nil).MarkNotificationRead), ctx, id)
}

// RemoveOrganizationMember mocks base method.
func (m *MockQuerier) RemoveOrganizationMember(ctx context.Context, arg sqlc.RemoveOrganizationMemberParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrganizationMember", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOrganizationMember indicates an expected call of RemoveOrganizationMember.
func (mr *MockQuerierMockRecorder) RemoveOrganizationMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrganizationMember", reflect.TypeOf((*MockQuerier)(nil).RemoveOrganizationMember), ctx, arg)
}

// RemovePayrollEmployee mocks base method.
func (m *MockQuerier) RemovePayrollEmployee(ctx context.Context, arg sqlc.RemovePayrollEmployeeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePayrollEmployee", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePayrollEmployee indicates an expected call of RemovePayrollEmployee.
func (mr *MockQuerierMockRecorder) RemovePayrollEmployee(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePayrollEmployee", reflect.TypeOf((*MockQuerier)(nil).RemovePayrollEmployee), ctx, arg)
}

// SetPrimaryWallet mocks base method.
func (m *MockQuerier) SetPrimaryWallet(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrimaryWallet", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrimaryWallet indicates an expected call of SetPrimaryWallet.
func (mr *MockQuerierMockRecorder) SetPrimaryWallet(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrimaryWallet", reflect.TypeOf((*MockQuerier)(nil).SetPrimaryWallet), ctx, userID)
}

// UpdateInvoiceContractAddress mocks base method.
func (m *MockQuerier) UpdateInvoiceContractAddress(ctx context.Context, arg sqlc.UpdateInvoiceContractAddressParams) (sqlc.Invoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceContractAddress", ctx, arg)
	ret0, _ := ret[0].(sqlc.Invoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceContractAddress indicates an expected call of UpdateInvoiceContractAddress.
func (mr *MockQuerierMockRecorder) UpdateInvoiceContractAddress(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceContractAddress", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceContractAddress), ctx, arg)
}

// UpdateInvoiceStatus mocks base method.
func (m *MockQuerier) UpdateInvoiceStatus(ctx context.Context, arg sqlc.UpdateInvoiceStatusParams) (sqlc.Invoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceStatus", ctx, arg)
	ret0, _ := ret[0].(sqlc.Invoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceStatus indicates an expected call of UpdateInvoiceStatus.
func (mr *MockQuerierMockRecorder) UpdateInvoiceStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceStatus), ctx, arg)
}

// UpdateKYC mocks base method.
func (m *MockQuerier) UpdateKYC(ctx context.Context, arg sqlc.UpdateKYCParams) (sqlc.Kyc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKYC", ctx, arg)
	ret0, _ := ret[0].(sqlc.Kyc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKYC indicates an expected call of UpdateKYC.
func (mr *MockQuerierMockRecorder) UpdateKYC(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKYC", reflect.TypeOf((*MockQuerier)(nil).UpdateKYC), ctx, arg)
}

// UpdateOrganization mocks base method.
func (m *MockQuerier) UpdateOrganization(ctx context.Context, arg sqlc.UpdateOrganizationParams) (sqlc.Organizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, arg)
	ret0, _ := ret[0].(sqlc.Organizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockQuerierMockRecorder) UpdateOrganization(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockQuerier)(nil).UpdateOrganization), ctx, arg)
}

// UpdateOrganizationMemberRole mocks base method.
func (m *MockQuerier) UpdateOrganizationMemberRole(ctx context.Context, arg sqlc.UpdateOrganizationMemberRoleParams) (sqlc.OrganizationMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationMemberRole", ctx, arg)
	ret0, _ := ret[0].(sqlc.OrganizationMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationMemberRole indicates an expected call of UpdateOrganizationMemberRole.
func (mr *MockQuerierMockRecorder) UpdateOrganizationMemberRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationMemberRole", reflect.TypeOf((*MockQuerier)(nil).UpdateOrganizationMemberRole), ctx, arg)
}

// UpdatePayrollContractAddress mocks base method.
func (m *MockQuerier) UpdatePayrollContractAddress(ctx context.Context, arg sqlc.UpdatePayrollContractAddressParams) (sqlc.Payrolls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayrollContractAddress", ctx, arg)
	ret0, _ := ret[0].(sqlc.Payrolls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayrollContractAddress indicates an expected call of UpdatePayrollContractAddress.
func (mr *MockQuerierMockRecorder) UpdatePayrollContractAddress(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayrollContractAddress", reflect.TypeOf((*MockQuerier)(nil).UpdatePayrollContractAddress), ctx, arg)
}

// UpdatePayrollStatus mocks base method.
func (m *MockQuerier) UpdatePayrollStatus(ctx context.Context, arg sqlc.UpdatePayrollStatusParams) (sqlc.Payrolls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayrollStatus", ctx, arg)
	ret0, _ := ret[0].(sqlc.Payrolls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayrollStatus indicates an expected call of UpdatePayrollStatus.
func (mr *MockQuerierMockRecorder) UpdatePayrollStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayrollStatus", reflect.TypeOf((*MockQuerier)(nil).UpdatePayrollStatus), ctx, arg)
}

// UpdateTransactionStatus mocks base method.
func (m *MockQuerier) UpdateTransactionStatus(ctx context.Context, arg sqlc.UpdateTransactionStatusParams) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", ctx, arg)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockQuerierMockRecorder) UpdateTransactionStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateTransactionStatus), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(ctx context.Context, arg sqlc.UpdateUserParams) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, arg)
}

// UpdateWalletPrimary mocks base method.
func (m *MockQuerier) UpdateWalletPrimary(ctx context.Context, arg sqlc.UpdateWalletPrimaryParams) (sqlc.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletPrimary", ctx, arg)
	ret0, _ := ret[0].(sqlc.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletPrimary indicates an expected call of UpdateWalletPrimary.
func (mr *MockQuerierMockRecorder) UpdateWalletPrimary(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletPrimary", reflect.TypeOf((*MockQuerier)(nil).UpdateWalletPrimary), ctx, arg)
}
